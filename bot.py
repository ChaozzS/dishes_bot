import os
import json
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.ext import Dispatcher, CallbackContext
from telegram.ext.webhookhandler import WebhookHandler
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBAPP_URL")  # –º–∞—î –±—É—Ç–∏ https://web-production-....railway.app/

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
dispatcher = app

# Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return 'ü§ñ Bot is running with webhook!', 200

@flask_app.route('/menu')
def serve_menu():
    return flask_app.send_static_file('menu.html')

@flask_app.route(f'/{TOKEN}', methods=['POST'])
async def receive_update():
    update = Update.de_json(request.get_json(force=True), app.bot)
    await dispatcher.process_update(update)
    return 'ok'

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = os.getenv("WEBAPP_URL") + "/menu"
    keyboard = [
        [InlineKeyboardButton("üìã –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é", web_app=WebAppInfo(url=url))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ WebApp Data
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        dish = data.get("dish")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üçΩÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏: {dish}")
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞:", e)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
async def setup_webhook():
    await app.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")
    print(f"üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}/{TOKEN}")

if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup_webhook())
    flask_app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 8080)))
