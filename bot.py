import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∂–µ—Å—Ç–∫–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–¥–µ—Å—å)
TOKEN = os.environ.get('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = int(os.environ.get('ADMIN_CHAT_ID', '123456789'))  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±–ª—é–¥
MENU = {
    '–ü–∏—Ü—Ü–∞': ['–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', '–ì–∞–≤–∞–π—Å–∫–∞—è'],
    '–°—É—à–∏': ['–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', '–î—Ä–∞–∫–æ–Ω'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–ö–æ–ª–∞', '–°–æ–∫', '–í–æ–¥–∞'],
}

# –°–ª–æ–≤–∞—Ä—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
INGREDIENTS = {
    '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞': ['–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å', '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞', '–ë–∞–∑–∏–ª–∏–∫'],
    '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏': ['–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å', '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏'],
    '–ì–∞–≤–∞–π—Å–∫–∞—è': ['–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å', '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞', '–í–µ—Ç—á–∏–Ω–∞', '–ê–Ω–∞–Ω–∞—Å—ã'],
    '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è': ['–†–∏—Å', '–ù–æ—Ä–∏', '–ö—Ä–∞–±–æ–≤–æ–µ –º—è—Å–æ', '–ê–≤–æ–∫–∞–¥–æ', '–û–≥—É—Ä–µ—Ü'],
    '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è': ['–†–∏—Å', '–ù–æ—Ä–∏', '–õ–æ—Å–æ—Å—å', '–°—ã—Ä –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', '–ê–≤–æ–∫–∞–¥–æ'],
    '–î—Ä–∞–∫–æ–Ω': ['–†–∏—Å', '–ù–æ—Ä–∏', '–£–≥–æ—Ä—å', '–ê–≤–æ–∫–∞–¥–æ', '–û–≥—É—Ä–µ—Ü', '–ò–∫—Ä–∞ –º–∞—Å–∞–≥–æ'],
    '–ö–æ–ª–∞': ['–í–æ–¥–∞', '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –∫—Ä–∞—Å–∏—Ç–µ–ª—å', '–ö–æ—Ñ–µ–∏–Ω', '–ì–∞–∑'],
    '–°–æ–∫': ['–§—Ä—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', '–í–æ–¥–∞', '–°–∞—Ö–∞—Ä'],
    '–í–æ–¥–∞': ['–í–æ–¥–∞'],
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in MENU]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:',
        reply_markup=reply_markup
    )

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–ª—é–¥–∞"""
    query = update.callback_query
    await query.answer()
    data = query.data.split('|')

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data[0] == 'cat':
        category = data[1]
        keyboard = [[InlineKeyboardButton(
            item, callback_data=f"item|{item}")
        ] for item in MENU[category]]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')])
        await query.edit_message_text(
            text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *{category}*. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:',
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    # –í—ã–±–æ—Ä –±–ª—é–¥–∞
    elif data[0] == 'item':
        item = data[1]
        ingredients = INGREDIENTS.get(item, [])
        ingredients_text = ', '.join(ingredients) if ingredients else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        order_text = f"üçΩ *{item}*\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients_text}"
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=order_text,
            parse_mode='Markdown'
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            text='‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
            parse_mode='Markdown'
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif query.data == 'back':
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in MENU]
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(handle_menu_selection))

    # –ó–∞–ø—É—Å–∫: polling –∏–ª–∏ webhook –¥–ª—è Railway
    if os.environ.get('RAILWAY'):
        WEBHOOK_URL = os.environ['WEBHOOK_URL']
        PORT = int(os.environ.get('PORT', '8443'))
        app.run_webhook(
            listen='0.0.0.0',
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}{TOKEN}"
        )
    else:
        app.run_polling()

if __name__ == '__main__':
    main()
